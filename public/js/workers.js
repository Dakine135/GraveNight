!function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s="./clientSource/js/lineOfSight.worker.js")}({"./clientSource/js/lineOfSight.worker.js":
/*!***********************************************!*\
  !*** ./clientSource/js/lineOfSight.worker.js ***!
  \***********************************************/
/*! no static exports found */function(t,e,o){const n=o(/*! ../../shared/Utilities.js */"./shared/Utilities.js"),i=o(/*! ../../shared/Hitbox.js */"./shared/Hitbox.js");console.log("Worker created"),onmessage=function(t){let e=t.data;!function({objectsInRange:t={},origin:e=null,renderDistance:o=500}){for(var r in t){let l=t[r],a=i.getVisualPoints({obj:l.hitbox,viewPoint:e,getPointsAfterEdge:!0});a.forEach(function(i){let r=i;i.extend&&(r=n.extendEndPoint({startPoint:e,endPoint:i,length:o}));this.getCollision({objects:t,origin:e,point:r})}.bind(this))}}({objectsInRange:e.objectsInRange,origin:e.origin,renderDistance:e.renderDistance})}},"./shared/Hitbox.js":
/*!**************************!*\
  !*** ./shared/Hitbox.js ***!
  \**************************/
/*! no static exports found */function(t,e,o){var n=o(/*! ../shared/Utilities.js */"./shared/Utilities.js");e.create=({id:t=0,x:e=0,y:o=0,width:n=50,height:i=50,angle:r=0})=>{let l=o-i/2,a=o+i/2,x=e-n/2,h=e+n/2;return{id:t,x:e,y:o,width:n,height:i,angle:r,top:l,bottom:a,left:x,right:h,topLeft:{x:x,y:l},topRight:{x:h,y:l},bottomLeft:{x:x,y:a},bottomRight:{x:h,y:a},points:[{x:x,y:l},{x:h,y:l},{x:x,y:a},{x:h,y:a}]}},e.moveTo=function(t,e,o){t.hitbox.x=e,t.hitbox.y=o,function(t){let e=t.hitbox,o=e.y-e.height/2,n=e.y+e.height/2,i=e.x-e.width/2,r=e.x+e.width/2;e.top=o,e.bottom=n,e.left=i,e.right=r,e.topLeft={x:i,y:o},e.topRight={x:r,y:o},e.bottomLeft={x:i,y:n},e.bottomRight={x:r,y:n}}(t)},e.getVisualPoints=function({obj:t,viewPoint:e,getPointsAfterEdge:o=!1}){let i=[];if(e.y<t.top)if(e.x<t.left){i=[t.topLeft,t.topRight,t.bottomLeft];let o=n.rotatePoint({center:e,point:t.bottomLeft,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.topRight,angle:-.01});r.extend=!0,i.push(r)}else if(e.x>t.right){i=[t.topLeft,t.topRight,t.bottomRight];let o=n.rotatePoint({center:e,point:t.topLeft,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.bottomRight,angle:-.01});r.extend=!0,i.push(r)}else{i=[t.topLeft,t.topRight];let o=n.rotatePoint({center:e,point:t.topLeft,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.topRight,angle:-.01});r.extend=!0,i.push(r)}else if(e.y>t.bottom)if(e.x<t.left){i=[t.topLeft,t.bottomLeft,t.bottomRight];let o=n.rotatePoint({center:e,point:t.bottomRight,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.topLeft,angle:-.01});r.extend=!0,i.push(r)}else if(e.x>t.right){i=[t.topRight,t.bottomLeft,t.bottomRight];let o=n.rotatePoint({center:e,point:t.topRight,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.bottomLeft,angle:-.01});r.extend=!0,i.push(r)}else{i=[t.bottomLeft,t.bottomRight];let o=n.rotatePoint({center:e,point:t.bottomRight,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.bottomLeft,angle:-.01});r.extend=!0,i.push(r)}else if(e.x<t.left){i=[t.topLeft,t.bottomLeft];let o=n.rotatePoint({center:e,point:t.bottomLeft,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.topLeft,angle:-.01});r.extend=!0,i.push(r)}else if(e.x>t.right){i=[t.topRight,t.bottomRight];let o=n.rotatePoint({center:e,point:t.topRight,angle:.01});o.extend=!0,i.push(o);let r=n.rotatePoint({center:e,point:t.bottomRight,angle:-.01});r.extend=!0,i.push(r)}else console.log("Catch in getVisualPoints, possibly viewPoint is inside the box");return(i.length<4||i.length>5)&&console.log("Wrong amount of points:",i.length),i},e.colliding=function(t,e){let o=t.hitbox,n=e.hitbox,i=!1;return i=!(o.top>n.bottom||o.bottom<n.top||o.right<n.left||o.left>n.right)},e.collideLineLine=function(t,e){var o=((e.x2-e.x1)*(t.y1-e.y1)-(e.y2-e.y1)*(t.x1-e.x1))/((e.y2-e.y1)*(t.x2-t.x1)-(e.x2-e.x1)*(t.y2-t.y1)),n=((t.x2-t.x1)*(t.y1-e.y1)-(t.y2-t.y1)*(t.x1-e.x1))/((e.y2-e.y1)*(t.x2-t.x1)-(e.x2-e.x1)*(t.y2-t.y1));return o>=0&&o<=1&&n>=0&&n<=1&&{x:t.x1+o*(t.x2-t.x1),y:t.y1+o*(t.y2-t.y1)}},e.collideLineRect=function(t,e){let o=this.collideLineLine(x1,y1,x2,y2,rx,ry,rx,ry+rh),n=this.collideLineLine(x1,y1,x2,y2,rx+rw,ry,rx+rw,ry+rh),i=this.collideLineLine(x1,y1,x2,y2,rx,ry,rx+rw,ry),r=this.collideLineLine(x1,y1,x2,y2,rx,ry+rh,rx+rw,ry+rh);return!!(o||n||i||r)&&{left:o,right:n,top:i,bottom:r}}},"./shared/Utilities.js":
/*!*****************************!*\
  !*** ./shared/Utilities.js ***!
  \*****************************/
/*! no static exports found */function(t,e){e.error=t=>{new Error(t)},e.randomColor=function(){return{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random())}},e.midPoint=(t,e)=>{return{x:e.x-(e.x-e.x)/2,y:e.y-(e.y-t.y)/2}},e.rotatePoint=({center:t={x:0,y:0},point:e={x:0,y:0},angle:o=0})=>{let n=Math.sin(o),i=Math.cos(o),r={x:e.x,y:e.y};r.x-=t.x,r.y-=t.y;let l=r.x*i-r.y*n,a=r.x*n+r.y*i;return r.x=l+t.x,r.y=a+t.y,r},e.extendEndPoint=({startPoint:t,endPoint:e,length:o})=>{let n=Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)),i=o-n;return{x:e.x+(e.x-t.x)/n*i,y:e.y+(e.y-t.y)/n*i}},e.dist=function(t,e){let o=Math.abs(t.x-e.x),n=Math.abs(t.y-e.y);return Math.sqrt(Math.pow(o,2)+Math.pow(n,2),2)},e.calculateAngle=({point1:t,point2:e,centerPoint:o={x:0,y:0}})=>{if(t.x===e.x&&t.y===e.y)return 0;let n={x:t.x-o.x,y:t.y-o.y},i={x:e.x-o.x,y:e.y-o.y},r=Math.atan2(n.y,n.x),l=Math.atan2(i.y,i.x);return r<0&&(r+=2*Math.PI),l<0&&(l+=2*Math.PI),l-r},e.mapNum=({input:t,start1:e,end1:o,start2:n,end2:i})=>{return t<e?t=e:t>o&&(t=o),(i-n)*((t-e)/(o-e))+n},e.cloneObject=function t(e){let o={};for(var n in e){let i=e[n];"object"==typeof i&&null!==i&&(o[n]=t(i)),null!==i&&(o[n]=i)}return o},e.memorySizeOf=function(t){var e=0;return function(t){return t<1024?t+" bytes":t<1048576?(t/1024).toFixed(3)+" KiB":t<1073741824?(t/1048576).toFixed(3)+" MiB":(t/1073741824).toFixed(3)+" GiB"}(function t(o){if(null!=o)switch(typeof o){case"number":e+=8;break;case"string":e+=2*o.length;break;case"boolean":e+=4;break;case"object":var n=Object.prototype.toString.call(o).slice(8,-1);if("Object"===n||"Array"===n)for(var i in o)o.hasOwnProperty(i)&&t(o[i]);else e+=2*o.toString().length}return e}(t))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,